import React, { useState, useEffect } from 'react';
import {
  Card,
  Button,
  Table,
  Tag,
  Space,
  Modal,
  Form,
  Input,
  Select,
  Switch,
  Badge,
  Tooltip,
  Alert,
  Spin,
  Row,
  Col,
  Statistic,
  Divider,
  Typography,
  Progress,
  Collapse,
  List,
  Tabs,
  message,
  Popconfirm
} from 'antd';
import {
  GroupOutlined,
  AppstoreOutlined,
  FileTextOutlined,
  ThunderboltOutlined,
  EyeOutlined,
  DeleteOutlined,
  PlusOutlined,
  SettingOutlined,
  BarChartOutlined,
  BulbOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  InfoCircleOutlined,
  FileOutlined,
  ClusterOutlined,
  CompressOutlined,
  ExpandOutlined,
  SyncOutlined
} from '@ant-design/icons';
import api from '../services/api';
import { Component } from '../types';

const { Title, Text, Paragraph } = Typography;
const { Panel } = Collapse;
const { TabPane } = Tabs;
const { Option } = Select;

interface ComponentGroupingManagerProps {
  projectId: string;
  components: Component[];
  onGroupsUpdate: (groups: any) => void;
  onTemplatesUpdate: (templates: any) => void;
  visible: boolean;
  onClose: () => void;
}

interface GroupingAnalysis {
  typeGroups: Record<string, any>;
  patterns: any[];
  suggestions: any[];
}

interface ComponentGroup {
  id: string;
  name: string;
  type: string;
  category: string;
  componentType: string;
  componentIds: string[];
  actualComponentCount: number;
  components: Component[];
  hasTemplate: boolean;
  canCreateTemplate: boolean;
  templateId?: string;
  createdAt: string;
  autoGenerated: boolean;
  priority?: number;
}

const ComponentGroupingManager: React.FC<ComponentGroupingManagerProps> = ({
  projectId,
  components,
  onGroupsUpdate,
  onTemplatesUpdate,
  visible,
  onClose
}) => {
  const [loading, setLoading] = useState(false);
  const [analysis, setAnalysis] = useState<GroupingAnalysis | null>(null);
  const [groups, setGroups] = useState<Record<string, ComponentGroup>>({});
  const [componentTypes, setComponentTypes] = useState<any>({});
  const [selectedComponents, setSelectedComponents] = useState<string[]>([]);
  const [activeTab, setActiveTab] = useState('overview');
  
  // Modal states
  const [showGroupModal, setShowGroupModal] = useState(false);
  const [showTemplateModal, setShowTemplateModal] = useState(false);
  const [selectedGroup, setSelectedGroup] = useState<ComponentGroup | null>(null);
  const [groupForm] = Form.useForm();
  const [templateForm] = Form.useForm();

  // Load initial data
  useEffect(() => {
    if (visible && projectId) {
      loadComponentData();
    }
  }, [visible, projectId]);

  const loadComponentData = async () => {
    try {
      setLoading(true);
      const [analysisData, groupsData, typesData] = await Promise.all([
        api.analyzeComponentGrouping(projectId),
        api.getComponentGroups(projectId),
        api.getComponentTypes(projectId)
      ]);

      setAnalysis(analysisData.analysis);
      setGroups(groupsData.groups);
      setComponentTypes(typesData);
    } catch (error) {
      console.error('Error loading component data:', error);
      message.error('Failed to load component data');
    } finally {
      setLoading(false);
    }
  };

  // Auto-group components by type
  const handleAutoGroup = async (generateTemplates: boolean = false) => {
    try {
      setLoading(true);
      const result = await api.autoGroupComponentsByType(projectId, generateTemplates);
      
      message.success(
        `Successfully created ${result.groupsCreated} groups${
          generateTemplates ? ` and ${result.templatesCreated} templates` : ''
        }`
      );
      
      await loadComponentData();
      onGroupsUpdate(result.groups);
      
      if (generateTemplates && result.templates.length > 0) {
        onTemplatesUpdate(result.templates);
      }
    } catch (error) {
      console.error('Error auto-grouping components:', error);
      message.error('Failed to auto-group components');
    } finally {
      setLoading(false);
    }
  };

  // Group components by specific type
  const handleGroupByType = async (values: any) => {
    try {
      setLoading(true);
      const result = await api.groupComponentsByType(projectId, values.componentType, {
        groupName: values.groupName,
        generateTemplate: values.generateTemplate
      });
      
      message.success(
        `Successfully grouped ${result.componentsGrouped} ${values.componentType} components`
      );
      
      await loadComponentData();
      onGroupsUpdate([result]);
      
      if (values.generateTemplate && result.template) {
        onTemplatesUpdate([result.template]);
      }
      
      setShowGroupModal(false);
      groupForm.resetFields();
    } catch (error) {
      console.error('Error grouping components by type:', error);
      message.error('Failed to group components by type');
    } finally {
      setLoading(false);
    }
  };

  // Create template from group
  const handleCreateTemplate = async (values: any) => {
    if (!selectedGroup) return;
    
    try {
      setLoading(true);
      const result = await api.createTemplateFromGroup(projectId, selectedGroup.id, {
        templateName: values.templateName,
        description: values.description
      });
      
      message.success(`Template "${values.templateName}" created successfully`);
      
      await loadComponentData();
      onTemplatesUpdate([result.template]);
      
      setShowTemplateModal(false);
      setSelectedGroup(null);
      templateForm.resetFields();
    } catch (error) {
      console.error('Error creating template from group:', error);
      message.error('Failed to create template from group');
    } finally {
      setLoading(false);
    }
  };

  // Delete group
  const handleDeleteGroup = async (groupId: string) => {
    try {
      setLoading(true);
      await api.ungroupComponents(projectId, groupId);
      message.success('Group deleted successfully');
      await loadComponentData();
    } catch (error) {
      console.error('Error deleting group:', error);
      message.error('Failed to delete group');
    } finally {
      setLoading(false);
    }
  };

  // Render overview tab
  const renderOverviewTab = () => (
    <div>
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col span={6}>
          <Card>
            <Statistic
              title="Total Components"
              value={components.length}
              prefix={<AppstoreOutlined />}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="Component Types"
              value={componentTypes.uniqueTypes || 0}
              prefix={<ClusterOutlined />}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="Existing Groups"
              value={Object.keys(groups).length}
              prefix={<GroupOutlined />}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="Suggestions"
              value={analysis?.suggestions.length || 0}
              prefix={<BulbOutlined />}
            />
          </Card>
        </Col>
      </Row>

      <Card title="Quick Actions" style={{ marginBottom: 24 }}>
        <Space>
          <Button
            type="primary"
            icon={<ThunderboltOutlined />}
            onClick={() => handleAutoGroup(false)}
            loading={loading}
          >
            Auto-Group by Type
          </Button>
          <Button
            type="primary"
            icon={<FileOutlined />}
            onClick={() => handleAutoGroup(true)}
            loading={loading}
          >
            Auto-Group + Templates
          </Button>
          <Button
            icon={<PlusOutlined />}
            onClick={() => setShowGroupModal(true)}
          >
            Manual Group
          </Button>
        </Space>
      </Card>

      {analysis && analysis.suggestions.length > 0 && (
        <Card title="Grouping Suggestions" style={{ marginBottom: 24 }}>
          <List
            dataSource={analysis.suggestions}
            renderItem={(suggestion: any) => (
              <List.Item
                actions={[
                  <Button
                    size="small"
                    type="primary"
                    onClick={() => api.groupComponentsByType(projectId, suggestion.componentType, {
                      generateTemplate: true
                    }).then(() => {
                      message.success('Components grouped successfully');
                      loadComponentData();
                    })}
                  >
                    Apply
                  </Button>
                ]}
              >
                <List.Item.Meta
                  avatar={<Badge count={suggestion.count} />}
                  title={
                    <Space>
                      <Text strong>{suggestion.componentType}</Text>
                      <Tag color="blue">{suggestion.category}</Tag>
                      <Tag color="green">Priority: {suggestion.priority}</Tag>
                    </Space>
                  }
                  description={suggestion.reason}
                />
              </List.Item>
            )}
          />
        </Card>
      )}
    </div>
  );

  // Render groups tab
  const renderGroupsTab = () => (
    <div>
      <Card title="Component Groups">
        <Table
          dataSource={Object.values(groups)}
          rowKey="id"
          columns={[
            {
              title: 'Group Name',
              dataIndex: 'name',
              key: 'name',
              render: (text: string, record: ComponentGroup) => (
                <Space>
                  <Text strong>{text}</Text>
                  {record.autoGenerated && <Tag color="blue">Auto</Tag>}
                  {record.hasTemplate && <Tag color="green">Template</Tag>}
                </Space>
              )
            },
            {
              title: 'Category',
              dataIndex: 'category',
              key: 'category',
              render: (text: string) => <Tag color="purple">{text}</Tag>
            },
            {
              title: 'Type',
              dataIndex: 'componentType',
              key: 'componentType',
              render: (text: string) => <Tag>{text}</Tag>
            },
            {
              title: 'Components',
              dataIndex: 'actualComponentCount',
              key: 'actualComponentCount',
              render: (count: number) => (
                <Badge count={count} showZero style={{ backgroundColor: '#52c41a' }} />
              )
            },
            {
              title: 'Actions',
              key: 'actions',
              render: (_, record: ComponentGroup) => (
                <Space>
                  <Tooltip title="View Components">
                    <Button
                      size="small"
                      icon={<EyeOutlined />}
                      onClick={() => {
                        setSelectedGroup(record);
                        setActiveTab('details');
                      }}
                    />
                  </Tooltip>
                  {record.canCreateTemplate && !record.hasTemplate && (
                    <Tooltip title="Create Template">
                      <Button
                        size="small"
                        icon={<FileOutlined />}
                        onClick={() => {
                          setSelectedGroup(record);
                          setShowTemplateModal(true);
                        }}
                      />
                    </Tooltip>
                  )}
                  <Popconfirm
                    title="Delete this group?"
                    onConfirm={() => handleDeleteGroup(record.id)}
                  >
                    <Button
                      size="small"
                      icon={<DeleteOutlined />}
                      danger
                    />
                  </Popconfirm>
                </Space>
              )
            }
          ]}
        />
      </Card>
    </div>
  );

  // Render types tab
  const renderTypesTab = () => (
    <div>
      <Card title="Component Types Distribution">
        {componentTypes.categoryGroups && (
          <Collapse defaultActiveKey={['conveyor']}>
            {Object.entries(componentTypes.categoryGroups).map(([category, data]: [string, any]) => (
              <Panel
                key={category}
                header={
                  <Space>
                    <Text strong>{category.toUpperCase()}</Text>
                    <Badge count={data.totalCount} />
                  </Space>
                }
              >
                <Row gutter={[16, 16]}>
                  {Object.entries(data.types).map(([type, count]: [string, any]) => (
                    <Col span={8} key={type}>
                      <Card size="small">
                        <Statistic
                          title={type}
                          value={count}
                          suffix={
                            <Button
                              size="small"
                              type="link"
                              onClick={() => {
                                groupForm.setFieldsValue({ componentType: type });
                                setShowGroupModal(true);
                              }}
                            >
                              Group
                            </Button>
                          }
                        />
                      </Card>
                    </Col>
                  ))}
                </Row>
              </Panel>
            ))}
          </Collapse>
        )}
      </Card>
    </div>
  );

  // Render details tab
  const renderDetailsTab = () => {
    if (!selectedGroup) {
      return <Alert message="Select a group to view details" type="info" />;
    }

    return (
      <div>
        <Card title={`Group: ${selectedGroup.name}`} style={{ marginBottom: 16 }}>
          <Row gutter={[16, 16]}>
            <Col span={12}>
              <Text strong>Category: </Text>
              <Tag color="purple">{selectedGroup.category}</Tag>
            </Col>
            <Col span={12}>
              <Text strong>Type: </Text>
              <Tag>{selectedGroup.componentType}</Tag>
            </Col>
            <Col span={12}>
              <Text strong>Components: </Text>
              <Badge count={selectedGroup.actualComponentCount} />
            </Col>
            <Col span={12}>
              <Text strong>Has Template: </Text>
              {selectedGroup.hasTemplate ? (
                <Tag color="green">Yes</Tag>
              ) : (
                <Tag color="orange">No</Tag>
              )}
            </Col>
          </Row>
        </Card>

        <Card title="Components in Group">
          <Table
            dataSource={selectedGroup.components}
            rowKey="id"
            size="small"
            columns={[
              {
                title: 'Equipment ID',
                dataIndex: 'equipmentId',
                key: 'equipmentId'
              },
              {
                title: 'Label',
                dataIndex: 'label',
                key: 'label'
              },
              {
                title: 'Type',
                dataIndex: 'type',
                key: 'type',
                render: (text: string) => <Tag>{text}</Tag>
              },
              {
                title: 'Position',
                key: 'position',
                render: (_, record: Component) => (
                  <Text code>
                    {record.geometry.x}, {record.geometry.y}
                  </Text>
                )
              },
              {
                title: 'Size',
                key: 'size',
                render: (_, record: Component) => (
                  <Text code>
                    {record.geometry.width} × {record.geometry.height}
                  </Text>
                )
              }
            ]}
          />
        </Card>
      </div>
    );
  };

  return (
    <Modal
      title="Component Grouping & Template Manager"
      visible={visible}
      onCancel={onClose}
      width={1200}
      footer={null}
      destroyOnClose
    >
      <Spin spinning={loading}>
        <Tabs activeKey={activeTab} onChange={setActiveTab}>
          <TabPane tab="Overview" key="overview">
            {renderOverviewTab()}
          </TabPane>
          <TabPane tab="Groups" key="groups">
            {renderGroupsTab()}
          </TabPane>
          <TabPane tab="Types" key="types">
            {renderTypesTab()}
          </TabPane>
          <TabPane tab="Details" key="details">
            {renderDetailsTab()}
          </TabPane>
        </Tabs>
      </Spin>

      {/* Manual Group Modal */}
      <Modal
        title="Create Component Group"
        visible={showGroupModal}
        onCancel={() => {
          setShowGroupModal(false);
          groupForm.resetFields();
        }}
        onOk={() => groupForm.submit()}
        confirmLoading={loading}
      >
        <Form form={groupForm} onFinish={handleGroupByType} layout="vertical">
          <Form.Item
            name="componentType"
            label="Component Type"
            rules={[{ required: true, message: 'Please select a component type' }]}
          >
            <Select placeholder="Select component type">
              {componentTypes.typeCounts &&
                Object.entries(componentTypes.typeCounts).map(([type, count]: [string, any]) => (
                  <Option key={type} value={type}>
                    {type} ({count} components)
                  </Option>
                ))}
            </Select>
          </Form.Item>
          <Form.Item
            name="groupName"
            label="Group Name"
            rules={[{ required: true, message: 'Please enter a group name' }]}
          >
            <Input placeholder="Enter group name" />
          </Form.Item>
          <Form.Item
            name="generateTemplate"
            label="Generate Template"
            valuePropName="checked"
          >
            <Switch />
          </Form.Item>
        </Form>
      </Modal>

      {/* Template Creation Modal */}
      <Modal
        title="Create Template from Group"
        visible={showTemplateModal}
        onCancel={() => {
          setShowTemplateModal(false);
          setSelectedGroup(null);
          templateForm.resetFields();
        }}
        onOk={() => templateForm.submit()}
        confirmLoading={loading}
      >
        <Form form={templateForm} onFinish={handleCreateTemplate} layout="vertical">
          <Form.Item
            name="templateName"
            label="Template Name"
            rules={[{ required: true, message: 'Please enter a template name' }]}
          >
            <Input placeholder="Enter template name" />
          </Form.Item>
          <Form.Item
            name="description"
            label="Description"
          >
            <Input.TextArea placeholder="Enter template description" rows={3} />
          </Form.Item>
        </Form>
      </Modal>
    </Modal>
  );
};

export default ComponentGroupingManager; 